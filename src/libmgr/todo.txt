[ --------------------------------------- ]
[ processus apres instantiation de libmgr ]
[ --------------------------------------- ]


l'emplacement du fichier de description de la lib (indexes) est une valeur contenue dans le fichier de configuration principal

si un fichier de description de la librairie est present, on lit les fichiers de la lib
	si fichier incorrect/malforme => on informe l'user que l'index est endommage

si un fichier de description n'est pas present, on en cree un contenant un index vide




	A etayer :

que contient le fichier de description : 
	-	principalement la structure des dossiers virtuels (regroupements choisis par l'utilisateur de ses documents) avec pour chaque fichier : 
		-	son id_file (index primaire dans la base de données sqlite)



REVOIR LE SYSTEME DE GESTION DE doc_file_item, a cause de la gestion memoire :
 _ soit les utiliser en tant que shared_ptr
 _ soit ne pouvoir les creer et les detruire qu'a partir d'une factory qui garde reference de chacun d'eux
 _ soit utiliser un systeme de handle (deja a moitie present avec l'id), les handles corespondant aux pointeurs reels dans une array (list/vector/whatever) de doc_database mais sinon ailleurs on manipule les handles, ainsi lorsq'in ajoute/supprime/deplace un doc_file_item on ne modifie qu'un handle, les pointeurs eux sont stockés ailleurs





-----------------------------------------------------
parties multithreads du programme : 

le gestionnaire d'evenements  : 
 - les ordres peuvent provenir eventuellement de (1,N) sockets locaux differents donc potentiellement
 	avec des actions de sens contraires.
 - implementation d'une liste multithreaded, chaque action ayant ete actionnée en prelmier doit etre réalisée en premier lieu.

 - comme ttes les actions seront actionnes depuis le handler du socket, ,si une seule fonction est appellee depuis le handler, c'est cette fonction qui devra etre thread-safe.
